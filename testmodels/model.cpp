

//code for random forest

                #include "model.h"

			struct Node {
					unsigned char feature;
					double split;
					bool left_is_leaf;
					bool right_is_leaf;
					unsigned char left;
					unsigned char right;
				};
			constexpr float predictions_0[4][10] = {{0.0, 0.08979591836734695, 0.09489795918367348, 0.12142857142857144, 0.0030612244897959186, 0.1163265306122449, 0.0030612244897959186, 0.021428571428571432, 0.028571428571428574, 0.021428571428571432},{0.020161290322580645, 0.014112903225806451, 0.008064516129032258, 0.012096774193548387, 0.046370967741935484, 0.02620967741935484, 0.004032258064516129, 0.17540322580645162, 0.02620967741935484, 0.16733870967741934},{0.0, 0.028735632183908046, 0.005747126436781609, 0.0, 0.3505747126436782, 0.017241379310344827, 0.022988505747126436, 0.07471264367816093, 0.0, 0.0},{0.12962962962962965, 0.035879629629629636, 0.040509259259259266, 0.005787037037037038, 0.035879629629629636, 0.003472222222222223, 0.14120370370370372, 0.01851851851851852, 0.08912037037037038, 0.0}};
			constexpr Node nodes_0[3] = {{ 42,10.5,false,false,1,2 },{ 30,0.5,true,true,0,1 },{ 50,4.5,true,true,2,3 }};

			std::vector<float> predict_0(std::vector<double> &x) {

				unsigned char i = 0;
				while(true) {
					if (x[nodes_0[i].feature] <= nodes_0[i].split){
						if (nodes_0[i].left_is_leaf) {
							i = nodes_0[i].left;
							break;
						} else {
							i = nodes_0[i].left;
						}
					} else {
						if (nodes_0[i].right_is_leaf) {
							i = nodes_0[i].right;
							break;
						} else {
							i = nodes_0[i].right;
						}
					}
				}
				return std::vector<float>(predictions_0[i], predictions_0[i]+10);

			}

			int predict_0_leaf_index(std::vector<double> &x) {

				unsigned char i = 0;
				while(true) {
					if (x[nodes_0[i].feature] <= nodes_0[i].split){
						if (nodes_0[i].left_is_leaf) {
							i = nodes_0[i].left;
							break;
						} else {
							i = nodes_0[i].left;
						}
					} else {
						if (nodes_0[i].right_is_leaf) {
							i = nodes_0[i].right;
							break;
						} else {
							i = nodes_0[i].right;
						}
					}
				}
				return i;

			}


			constexpr float predictions_1[4][10] = {{0.0022522522522522522, 0.0518018018018018, 0.006756756756756757, 0.006756756756756757, 0.07207207207207207, 0.04504504504504504, 0.3063063063063063, 0.0045045045045045045, 0.0045045045045045045, 0.0},{0.0, 0.04093567251461989, 0.13157894736842107, 0.01754385964912281, 0.0, 0.2923976608187135, 0.0029239766081871348, 0.014619883040935675, 0.0, 0.0},{0.3375, 0.0, 0.0, 0.0, 0.003125, 0.00625, 0.003125, 0.0, 0.015625, 0.134375},{0.0, 0.06036931818181819, 0.06392045454545456, 0.06605113636363638, 0.061789772727272735, 0.009232954545454548, 0.0021306818181818185, 0.10085227272727273, 0.09090909090909093, 0.04474431818181819}};
			constexpr Node nodes_1[3] = {{ 21,1.5,false,false,1,2 },{ 58,6.5,true,true,0,1 },{ 36,1.5,true,true,2,3 }};

			std::vector<float> predict_1(std::vector<double> &x) {

				unsigned char i = 0;
				while(true) {
					if (x[nodes_1[i].feature] <= nodes_1[i].split){
						if (nodes_1[i].left_is_leaf) {
							i = nodes_1[i].left;
							break;
						} else {
							i = nodes_1[i].left;
						}
					} else {
						if (nodes_1[i].right_is_leaf) {
							i = nodes_1[i].right;
							break;
						} else {
							i = nodes_1[i].right;
						}
					}
				}
				return std::vector<float>(predictions_1[i], predictions_1[i]+10);

			}

			int predict_1_leaf_index(std::vector<double> &x) {

				unsigned char i = 0;
				while(true) {
					if (x[nodes_1[i].feature] <= nodes_1[i].split){
						if (nodes_1[i].left_is_leaf) {
							i = nodes_1[i].left;
							break;
						} else {
							i = nodes_1[i].left;
						}
					} else {
						if (nodes_1[i].right_is_leaf) {
							i = nodes_1[i].right;
							break;
						} else {
							i = nodes_1[i].right;
						}
					}
				}
				return i;

			}

                std::vector<float> predict_forest(std::vector<double> &pX){
                    	std::vector<float> result = predict_0(pX);
	std::vector<float> result_temp;
	result_temp = predict_1(pX);
	std::transform(result.begin(), result.end(), result_temp.begin(),result.begin(), std::plus<float>());

                    return result;
                }
                std::vector<int> predict_leaf_indices(std::vector<double> &pX){
                    	std::vector<int> result_temp(2);
	result_temp[0] = predict_0_leaf_index(pX);
	result_temp[1] = predict_1_leaf_index(pX);
	std::vector<int> result = result_temp;

                    return result;
                }
            //code for logistic regression



#include "model.h"
			constexpr float coef[10][64] = {{0.0, -0.0014707081189448985, -0.019029184825958497, 0.14111001451065497, 0.06682621914313555, -0.10593969464363782, -0.06930824944248906, -0.0052728330036002375, -0.0001245159201734019, -0.016753719523416692, -0.0290427210821803, 0.08337572421012424, 0.055554440935814284, 0.1604757152658049, -0.021616750692699586, -0.0054270107819468704, -0.0009238511982086725, 0.008014168948375377, 0.1121980822341627, 0.014251613487730463, -0.22744152223145347, 0.13599712476872136, 0.07592600559219854, -0.002146233807834481, -0.00044991173042557267, 0.08006968991832256, 0.10803022813230309, -0.10178091733026935, -0.4004714138979774, -0.02554388262802272, 0.12999501174477077, -0.0004852677992380986, 0.0, 0.15128814579384517, 0.0927006808350306, -0.24098362811171503, -0.3712952211622946, -0.009361781359617332, 0.08782939680026626, 0.0, -0.0010083406595472826, 0.044808996616868935, 0.17462957998843454, -0.08907806355594496, -0.12957434249975258, 0.04496858023330592, 0.030198519820416884, -0.00044026485566290517, -0.0036632785882312812, -0.028429018456106243, 0.07385739974227688, 0.09212286980130366, 0.07575823005968778, 0.06995019821826916, -0.03402121934030768, -0.005274049677382269, -1.364181674684e-05, -0.0002397102128808072, -0.004517922610669632, 0.10539148029626066, -0.0020045484113015836, 0.007584972111338997, -0.04498215198333279, -0.013314368787036616},{0.0, -0.018559418707738536, -0.10895718834978917, 0.04426517061051638, -0.6529376617354932, 0.5338543246332037, -0.13942463324792875, -0.007251179448315804, -0.01335347164058811, -0.3101704029515019, -0.3611190868951697, -0.2095433601629025, 0.2277477241274489, -0.19727982489539722, -0.3112996593646979, -0.006811560881972131, 0.04783982029488689, 0.4794187210850577, -0.015613494561360195, 0.5830301048504651, 0.23429012050476636, -0.1538048550614264, -0.028904422628940826, -0.0025403284653711627, 0.02586663433074351, -0.12381260156694567, -0.010707386691172365, 0.03689616809618329, 0.23704888361255916, 0.09560617464043417, -0.1451034622150841, -7.947400519836007e-05, 0.0, 0.007123866651934648, 0.23458660066684472, -0.17754032490740784, 0.1786702702474295, 0.15417465688668838, -0.06126540768568696, 0.0, -0.0001527729811098486, -0.17581614701772372, -0.025865399677401132, 0.27801692545978757, 0.07052050884880084, -0.22875553729553333, -0.39197952464484126, -0.002924500845810425, -0.0021040976517567576, -0.05531026512471695, -0.043649992448103296, 0.06179361016900724, 0.15612064234976597, 0.010888424363575134, -0.13042136833472437, 0.18670453155871655, -0.0006532957136159708, 0.012018868099370902, -0.26690148097586147, 0.14810800895412182, -0.06360047193508638, 0.15995762241231556, 0.029430073339514126, 0.30691921632311797},{0.0, 0.019069052327211213, 0.012259150412665586, 0.08333336479562244, 0.035779079396951914, -0.07289636648096345, 0.024579319444241975, -0.0021293172453044087, -0.022779661420420483, 0.17741190239246574, 0.07640340426156864, -0.129137000493799, 0.28383082400166815, -0.043170743236128246, 0.09040776820311981, -0.002919623666422345, -0.011395164870806091, -0.08679493947629088, -0.14782053975434334, -0.26103332700041, 0.17509749311814893, -0.025570963970034558, 0.14969237920465853, -0.0008460901081541903, -3.421951619399708e-05, -0.1406393572718908, -0.535783626072287, -0.33247453789976283, -0.19364436911494293, 0.032831268720874864, 0.02159401275180003, -4.725830802389944e-05, 0.0, -0.15140209360387086, -0.3261522536073633, -0.11224469128111766, -0.008640293933979167, -0.1946611272713724, -0.21306804601309778, 0.0, -0.00012993006764522953, 0.042818407052684186, 0.02952232338987687, 0.41032672582504176, -0.34507814936281506, -0.3410030000601574, -0.09913372586847642, 0.004368765577068252, 0.004142243824650718, 0.06458533053721786, 0.04070137176296655, 0.479773125083572, 0.3051997463258758, 0.240942914977278, 0.09459258448980493, 0.03390332683293485, 0.0014203100870621508, 0.03424926052500118, 0.20653612609333474, 0.132924378245221, -0.0074984425917265654, 0.240784555782806, 0.4117649880645541, 0.10506336817661895},{0.0, 0.06746452066816788, -0.10177959340472224, 0.1869916192374029, 0.4292346605068122, 0.030392089489841616, -0.11667646919991233, -0.0021505810456840693, -0.005125699535479295, 0.10772462004264538, 0.06442711517194047, 0.018823305802073528, 0.08386879432098207, 0.17836979292738186, 0.15019689001931844, -0.010165139411167853, -0.0009851027206960353, -0.08052345383734746, -0.2903725553291194, -0.35927995603238494, 0.047415302847649755, -0.2575059155566467, 0.07445235301914918, -0.0008963901301344603, -1.1838408504472912e-05, -0.0890151843309537, -0.428546346208746, -0.11841974865626424, 0.3078292072631325, -0.33033183541162975, -0.27724987156557357, -4.7255883835472516e-05, 0.0, -0.08487556675634722, -0.18197966497887405, 0.024653419615554138, 0.15536569622773116, -0.15408825876425353, 0.04616423368556749, 0.0, -0.0001298522920830598, 0.04378094919077963, -0.32564384216526515, -0.4649328790144996, 0.14521818826379979, 0.30534825320223197, 0.26133106657984234, -0.004207255385483248, -0.00015923809790995938, -0.03198800679230461, 0.010644180267541487, -0.2193187118107857, 0.024545217784784478, 0.2439284007320501, 0.33446896045871966, -0.07989232335612229, -1.3711847917087361e-05, 0.09645880278419736, 0.23872743514292225, 0.031174705437406327, 0.0370151868144572, -0.013069311539696519, -0.021421368757638774, -0.1661561816763181},{0.0, -0.015392990630834658, -0.1290415702036292, -0.3645112628234661, -0.26388338260095223, -0.3013102571600306, -0.17061736712938505, 0.055288552201073066, -0.00014623277293951626, 0.07918838161415231, -0.19147137482295343, -0.20856112391032322, -0.3042306715461356, -0.120554612842729, -0.13816711883994498, 0.05043886970579506, -0.0011751001250462226, 0.05918169391161598, 0.13524185381443832, 0.1256416881105297, 0.016652446924168778, 0.10090207038097886, -0.06071193017170814, 0.03391343258347607, -0.0005755175000856316, 0.05121171933705183, 0.5110828471725929, 0.14677049779615878, -0.001294369611885195, -0.004547192618105034, 0.443088236215606, 0.0034420206275033657, 0.0, 0.14992862473283708, 0.21234266817432002, -0.07153051667688647, 0.2810159704880361, 0.22839635069479736, 0.2604487958602359, 0.0, 0.002447188266679807, 0.4309607163093765, 0.048202066436238984, 0.5285579614226501, 0.38848857967616346, 0.14725460373222293, 0.15112223144848055, -0.0006726494844828601, 0.005638195494064984, 0.21470077774249638, -0.1537109505258249, 0.09194322290191675, -0.028637958661460003, -0.33345301166853963, -0.14421243318789956, -0.004495108115691895, -1.703156382218887e-05, -0.05700859477451984, -0.13035110847899245, -0.26347084133856424, -0.12758982711709915, -0.246413726617206, -0.06252834613770146, -0.00624591846178138},{0.0, 0.05365137610527836, 0.4650773267533458, -0.15367003332705134, 0.06373771675939494, 0.2716732636193806, 0.3629411172703728, -0.027524991666025168, -0.00011559906070485049, -0.007373241931560506, 0.17057849025858238, 0.21800467773849938, -0.058478517846773444, 0.01685425659593487, -0.03579734444469353, -0.004371926915198432, -0.002262273117589471, -0.004788733437721004, 0.1238736168438306, -0.0072861727208095445, -0.38366000633345815, -0.34055897990415906, -0.4242320495498122, -0.004088513109872773, -0.0010738571612331162, 0.07826006665247637, 0.26393037475513104, -0.14186134421562677, 0.25245172953924844, -0.17430042700575182, -0.27495652503316154, -6.732520189239024e-05, 0.0, 0.0759851460032267, 0.08145866914314129, -0.14429602697885927, -0.26871112758717824, 0.10884786254450192, 0.12250963550503034, 0.0, -0.00013028215111542872, -0.24147091553308525, -0.27651190840879497, -0.21305171551526172, -0.18934050400403035, 0.22229220311689804, -0.0008799406573670848, -0.000441055332235777, -0.00015606515015960046, -0.09532447318526845, -0.1748581492049516, -0.008112002205970602, 0.015329484760725064, -0.08436824655496745, -0.13131433162056075, -0.010234357436629387, -1.2349188778137441e-05, 0.03154217353008124, 0.4058960563003181, 0.19739204369407093, -0.008487549638231938, -0.013275172232961182, -0.009545359678841861, -0.03753851055516859},{0.0, -0.009526770813025708, -0.1746274835260567, -0.13614524250886725, -0.09716886170675854, -0.1783643893249468, -0.0848802706928909, -0.0018945586958725763, -0.00029438655652580466, -0.11743923278518159, -0.12429157779396907, -0.006981982552615672, -0.3435317329491309, 0.00018659623082896448, 0.028822923906426712, -0.002191437641322984, -0.0019980627675241164, -0.09410454505358307, 0.1356792766968538, -0.005769161412046677, -0.2661962435332936, -0.3572511961403555, -0.07918978474256194, -0.0012868760005315262, -0.0009457496319771517, 0.12595989796027246, 0.0490974366413962, 0.16674979559701264, -0.10300606301463866, 0.01903138593347839, -0.20144215727840023, -0.0001827139937422185, 0.0, 0.14336455530564052, 0.1988893514570728, 0.3044223582357626, 0.002014064976216781, -0.11076448421186391, 0.10792732511828396, 0.0, -0.0005028883705430467, -0.08887383712899011, 0.5354301210120821, 0.1284207558343507, 0.16130574980029297, -0.0007185722513002871, 0.26418531061620804, 0.005779456721965697, -0.001228305976033472, -0.07959657400652206, 0.12094793768364227, 0.016025748144528198, -0.03478315773769442, 0.28332272423347876, 0.08526310591746221, -0.11613998878656297, -1.2239213305833657e-05, -0.010972135985096478, -0.1647961264715505, -0.1868499373027703, 0.018411407459734668, 0.15419126724421345, -0.03531957733401682, -0.09301746683360253},{0.0, 0.03871473082293209, 0.1359710196556511, 0.09518920830868477, 0.12055356249794016, 0.07292046867093595, 0.233759353058617, 0.06907808075753152, -0.0001208651804592923, 0.08451099991966346, 0.1729727988430164, 0.14725002688409136, 0.3992187471440001, -0.12754796910994004, -0.04184353693721577, 0.05145456125940887, -4.9709592793642e-05, -0.23250933488464126, -0.31617386146722526, -0.09517177863700643, 0.11804495123642149, 0.20159370764264928, 0.15453932078837732, 0.002948489583812674, -1.3013758325248054e-05, -0.0902998404883654, 0.015941382464790738, -0.34011267028851705, 0.052237932972822594, 0.15484420198333762, 0.2670084839059507, -0.0015110552214137921, 0.0, 0.10587566561086224, -0.011265844551411563, -0.04025027646057812, 0.08178317780196001, 0.22919356245823977, 0.2207713946729564, 0.0, -0.00012991842569900794, -0.03199685191493326, -0.06810685808191003, -0.011398435145884012, 0.19190708123223107, -0.025161353750022795, -0.017478909091263498, -0.0004395173370649923, -0.00019711790468366274, -0.05621894802340352, -0.004780642367705068, 0.15273394633883225, -0.1442450682215435, -0.40528834137647607, -0.13678836368006736, -0.003322800354629155, -2.57137352787267e-05, 0.002297671305181007, 0.06321973910162434, -0.25012375576778006, -0.2393486271042163, -0.32889986482644035, -0.13648094657618037, -0.008249751610144258},{0.0, -0.05348647071316077, 0.08662597969174865, -0.24057166447324588, 0.07591855432427319, -0.1831651973106554, -0.14225146668405836, -0.012844307519585638, 0.04238190226225577, -0.1264680688472397, 0.06473901514602201, 0.03866693584845912, -0.21476233365877806, 0.21292921598879355, 0.15319175423259562, -0.009133706815646053, -0.028649249406462362, -0.06783213952491775, 0.20921692305318917, -0.09234167354822895, 0.11157771235185869, 0.12335598985594437, 0.09912910667438359, -0.003142924755108839, -0.022594581637210627, 0.07221645247882445, -0.17851483985134858, 0.4207219674211064, -0.14529056163980333, 0.04084973324756941, 0.008476589472866572, -0.000106864360627437, 0.0, -0.04686901172267555, -0.08779311257868307, 0.3198221392284414, 0.08335475162893416, -0.2540101171490413, -0.4820898225353188, 0.0, -0.0001333362350989658, 0.11213578639451578, 0.24034717910311257, 0.08208248816014939, 0.10017741054317927, 0.0009202376740855081, 0.10207646002927369, -0.0012458616800980753, -0.0021146479622327166, 0.049348457340071504, 0.1750578642831235, -0.35063212464254284, -0.24196545399396277, 0.15896580693873863, 0.1297397319703741, -0.045785673634144125, -0.0006591557785931214, -0.02455028173239303, -0.33744468678594014, -0.04521636740112757, 0.4193452420589194, -0.07697780818771353, -0.09595250000892874, -0.0934055061283493},{0.0, -0.08046332093988429, -0.1664984562032736, 0.3440088256697026, 0.2219401134146582, -0.06716424149312633, 0.10187866662343367, -0.06529886433421565, -0.00032147017496493184, 0.1293687620699705, 0.1568039369131166, 0.048102796636345216, -0.1292172745291237, -0.08026242692457383, 0.12610507391778472, -0.06087302485152683, -0.00040130649575984, 0.0199385622694471, 0.05377069846953606, 0.09795866290211525, 0.1742197451151673, 0.5728430179843017, 0.039299021814251614, -0.021914565790281452, -0.00016794498678758275, 0.036049157311199335, 0.2054699296573058, 0.2635107894799514, -0.00586097610855156, 0.1915605731378007, 0.02858968200121354, -0.0009148058535317717, 0.0, -0.350419332015461, -0.21278709456010989, 0.13794754733677475, -0.13355728868690522, 0.0022733361718858397, -0.08922750540825519, 0.0, -0.0001298670838380915, -0.1363471039695083, -0.332003261596404, -0.6489437634704095, -0.39362452249790103, -0.12514541460176598, -0.29944148823229005, 0.00022288262180407203, -0.00015768798770842115, 0.018232719968532745, -0.04420901919300166, -0.31632968377990683, -0.1273216826662212, -0.18488886986344102, -0.06730666667282355, 0.04453644296950663, -1.3171229004236311e-05, -0.08379605353894105, -0.01036803131519878, 0.1306702851831256, -0.026242369535502425, 0.11611746585331047, -0.034964810927444454, 0.005945119552662718}};
			constexpr float intercept[10] = {0.0029260261657063883, -0.08308254480098459, 0.002267654708099261, 0.010946543031254424, 0.05409918038957383, -0.011128822631317273, -0.006321272266228153, 0.01397637650613549, 0.0574700939466216, -0.04115323504886561};

			std::vector<double> predict_lr(std::vector<int> &x) {
				std::vector<double> pred(10, 0);
				for (unsigned int j = 0; j < 10; ++j) {
					float sum = intercept[j]; 
					for (unsigned int i = 0; i < 64; ++i) {
						sum += coef[j][i] * x[i];
					}
					pred[j] += sum; 
				}
				return pred;
			}//combining Random Forest and Logistic Regression
std::vector<double> predict(std::vector<double> features) {
    std::vector<int> leaf_indices = predict_leaf_indices(features);
    return predict_lr(leaf_indices);
}
