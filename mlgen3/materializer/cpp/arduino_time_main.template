#include <Arduino.h>
#include <ArduinoSTL.h>
#include <Chrono.h>
#include <string>

//IMPORTANT: Due to support limitations of the library "ArduinoSTL", the code is not compatible with other platforms than AtmelAVR
//please visit https://docs.platformio.org/en/latest/boards/index.html, to check if your device is supported.

{typedefinitions}

std::vector<FEATURE_TYPE> v;
String incomingByte;
std::vector<FEATURE_TYPE> data;
std::vector<LABEL_TYPE> result;

//for time measurement
Chrono chrono;
unsigned long start;
unsigned long end;
 

int vectorArgmax(const std::vector<OUTPUT_TYPE>& vector) {
    if (vector.empty()) {
        return -1;
    }
    
    OUTPUT_TYPE maxVal = vector[0];
    int maxIndex = 0;
    
    for (size_t i = 1; i < vector.size(); i++) {
        if (vector[i] > maxVal) {
            maxVal = vector[i];
            maxIndex = i;
        }
    }
    
    return maxIndex;
}

//checks if Arduino::String is a float.
//@defragster https://forum.pjrc.com/index.php?threads/testing-if-a-string-is-numeric.27842/#post-65572

bool isNumeric(const char* str) {
  byte ii = 0;
  bool RetVal = false;
  if ( '-' == str[ii] )
    ii++;
  while (str[ii])
  {
    if ( '.' == str[ii] ) {
      ii++;
      break;
    }
    if (!isdigit(str[ii])) return false;
    ii++;
    RetVal = true;
  }
  while (str[ii])
  {
    if (!isdigit(str[ii])) return false;
    ii++;
    RetVal = true;
  }
  return RetVal;
}

std::vector<FEATURE_TYPE> read_uart() {
  // Read bytes and accumulate them into a buffer
  v.clear();
  String buffer = "";
  int featureCounter = 0;
  while (Serial.available() > 0) {
    float byteRead = Serial.parseFloat();
    FEATURE_TYPE input = (FEATURE_TYPE) byteRead;
    v.push_back(input);
      featureCounter++;
      if(featureCounter >= AMOUNT_FEATURES){
          break;
      }
  }

  return v;
}


void setup() {
  Serial.begin(9600);
  chrono.start();
}

void loop() {
    unsigned int n_correct = 0;
    start = chrono.elapsed();
    for (unsigned int i = 0; i < X.size(); ++i) {
      result = predict(X[i]);
      if (vectorArgmax(result) == Y[i]) {
        n_correct += 1;
      }
    }
    end = chrono.elapsed();
    auto diff = end-start;
    auto accuray = n_correct / X.size() * 100.0f;
    auto runtime_per_elem = diff / X.size();

    Serial.print(accuray);
    Serial.print(runtime_per_elem);
    Serial.print("");

    /*
    incomingByte = "";
    data = read_uart();
	  if(data.size()>0){
      chrono.restart();
      start = chrono.elapsed();
		  result = predict(data);
      end = chrono.elapsed();
      Serial.print("result: ");
      Serial.println(vectorArgmax(result));
      Serial.print("prediction time: ");
      Serial.println(end-start);
      data.clear();
	  }
    */
}