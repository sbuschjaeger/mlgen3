import sys
import numpy as np
import pandas as pd

sys.path.append("../mlgen3")
import os
import unittest
from mlgen3.models.rocket import Rocket
from sktime.transformations.panel.rocket import Rocket as RocketPanel
from sktime.datasets import load_from_tsfile


class TestRocketClassifier:

    def setUp(self):
        self.kernel = 2

        path = os.path.join(os.path.dirname(__file__), "WalkingSittingStanding/")

        self.X_train, self.Y_train = load_from_tsfile(
            os.path.join(path, "WalkingSittingStanding_TRAIN.ts")
        )
        self.X_test, self.Y_test = load_from_tsfile(
            os.path.join(path, "WalkingSittingStanding_TEST.ts")
        )

        rocket = RocketPanel(num_kernels=self.kernel, normalise=False)
        rocket.fit(self.X_train)
        self.X_train_transformed = rocket.transform(self.X_train)

        self.model = rocket

    def testKernelConvolution(self):
        sk_rocket: RocketPanel = self.model
        own_rocket = Rocket.from_sklearn(sk_rocket)

        own_x_train = own_rocket.predict_proba(self.X_train)
        # if convolution is correct, own_x_train == self.X_train_transformed

        pd.set_option("display.max_rows", None)
        pd.set_option("display.max_columns", None)
        pd.set_option("display.width", None)
        pd.set_option("display.max_colwidth", None)
        np.set_printoptions(threshold=np.inf)

        # with open("own_rocket.txt", "a") as f:
        #    print(own_x_train, file=f)

        # with open("sk_rocket.txt", "a") as f:
        #    print(self.X_train_transformed, file=f)

        # compare both feature ouputs
        for i in range(np.shape(self.X_train_transformed)[0]):
            for j in range(np.shape(self.X_train_transformed)[1]):
                # results of sktime rocket got rounded on six decimal places, while our
                # rocket results got eight decimal places.
                a = self.X_train_transformed.iloc[i, j]
                b = own_x_train[(i * np.shape(self.X_train_transformed)[1]) + j]

                assert np.abs(a - b) > 1e-05, (
                    "rocket results are not equal! a: ",
                    a,
                    " b: ",
                    b,
                    "difference: ",
                    abs(a - b),
                )


if __name__ == "__main__":
    test = TestRocketClassifier()
    test.setUp()
    test.testKernelConvolution()
    unittest.main()
